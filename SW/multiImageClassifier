import tensorflow as tf
from tensorflow import keras
import keras
import matplotlib.pyplot as plt

# matplotlib이 되는지 확인
import numpy as np
x = np.arange(0,6,0.1)
y = np.sin(x)

plt.plot(x,y)
plt.show()
# 이건 잘 동작하는데 local directory에서 불러온 이미지는 plt.show()가 작동 안 함.

# 데이터 불러온 뒤 전처리
# 40%를 훈련에, 10%를 유효성 검사에, 10%를 테스트에 사용

seed_train_validation = 1
shuffle_value = True
validation_split=0.2

train_ds = tf.keras.utils.image_dataset_from_directory(
  directory='/Users/nagyeoman/Downloads/sampledata',
  image_size=(96, 96),
  validation_split = validation_split,
  subset = "training",
  seed = seed_train_validation,
  color_mode = 'rgb',
  shuffle = shuffle_value)

validation_ds = tf.keras.utils.image_dataset_from_directory(
  directory='/Users/nagyeoman/Downloads/sampledata',
  image_size=(96, 96),
  validation_split = validation_split,
  subset = "validation",
  seed = seed_train_validation,
  color_mode = 'rgb',
  shuffle = shuffle_value)

val_batches = tf.data.experimental.cardinality(validation_ds)
test_ds = validation_ds.take((2*val_batches) // 3)
validatoin_ds = validation_ds.skip((2*val_batches) // 3)


# 데이터 표준화하기
size = (96, 96)

train_ds = train_ds.map(lambda x, y: (tf.image.resize(x, size), y))
validation_ds = validation_ds.map(lambda x, y: (tf.image.resize(x, size), y))
test_ds = test_ds.map(lambda x, y: (tf.image.resize(x, size), y))

plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.axis("off")

# 데이터 로딩 속도 최적화
# batch_size = 32
#
# train_ds = train_ds.cache().batch(batch_size).prefetch(buffer_size=10)
# validation_ds = validation_ds.cache().batch(batch_size).prefetch(buffer_size=10)
# test_ds = test_ds.cache().batch(batch_size).prefetch(buffer_size=10)

#모델 빌드하기
from keras.applications.vgg16 import VGG16
from keras.layers import GlobalAvgPool2D, Dense
from keras.models import Model

# base model 불러오기
base_model = VGG16(input_shape=(96, 96, 3), include_top=False, weights='imagenet')

# Freeze the base model
base_model.trainable = False

# Create new model on top
inputs = keras.Input(shape=(96, 96, 3))
x = inputs

# scale inputs
scale_layer = keras.layers.Rescaling(scale=1 / 127.5, offset=-1)
x = scale_layer(x)

#
x = base_model(x, training=False)
x = keras.layers.GlobalAvgPool2D()(x)
x = keras.layers.Dropout(0.3)(x) # Regularize with dropout
print(x.shape)
outputs = keras.layers.Dense(1, activation='softmax')(x)
print(outputs.shape)
model = keras.Model(inputs, outputs)

model.summary()

# 최상위 레이어 훈련하기
model.compile(
  optimizer=keras.optimizers.legacy.SGD(0.001),
  loss="sparse_categorical_crossentropy",
  metrics=[keras.metrics.Accuracy()],
)

epochs = 20
 model.fit(train_ds, epochs=epochs, validation_data=validation_ds)

