import os.path
import cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import seaborn as sns

from pathlib import Path
from tqdm import tqdm
from time import perf_counter

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report,accuracy_score
from IPython.display import Markdown, display

# 데이터 불러오기(드라이브 마운트)
from google.colab import drive
drive.mount('/content/drive')

# 이미지 경로를 데이터 프레임 형태로 만드는 함수
dir_ = Path('/content/drive/MyDrive/sampledata2')
filepaths = list(dir_.glob(r'**/*.png'))
print(len(filepaths))

def proc_img(filepath):
  # 이미지데이터의 경로와 label 데이터로 데이터프레임 만들기
  labels = [str(filepath[i]).split("/")[-2] \
            for i in range(len(filepath))]
  filepath = pd.Series(filepath, name='Filepath').astype(str)
  labels = pd.Series(labels, name='Label')

  # 경로와 라벨 합치기
  df = pd.concat([filepath, labels], axis=1)

  # index 재설정
  df = df.sample(frac=1, random_state=0).reset_index(drop = True)

  return df

df = proc_img(filepaths)
df.head(5)

print(f'Number of pictures: {df.shape[0]}\n')
print(f'Number of different labels: {len(df.Label.unique())}\n')
print(f'Labels: {df.Label.unique()}')

# 이미지 데이터 확인
fig, axes = plt.subplots(nrows=4, ncols=10, figsize=(15, 7),
                        subplot_kw={'xticks': [], 'yticks':[]})
for i, ax in enumerate(axes.flat):
  ax.imshow(plt.imread(df.Filepath[i]))
  ax.set_title(df.Label[i], fontsize = 12)
plt.tight_layout(pad=0.5)
plt.show()

vc = df['Label'].value_counts()
plt.figure(figsize=(9,5))
sns.barplot(x=vc.index, y = vc, palette = 'rocket')
plt.title("Number of pictures of each category", fontsize = 15)
plt.show()

# 이미지 데이터 train, test 데이터로 분류
# training/test split
train_df, test_df = train_test_split(df, test_size=0.1, random_state=0)
train_df.shape, test_df.shape

!rmdir /content/drive/MyDrive/sampledata2/.ipynb_checkpoints/

# base model 전처리
import numpy as np
import tensorflow as tf

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255, validation_split=0.2)
# flow_from_directory()는 인자로 설정해주는 directory의 바로 하위 디렉토리 이름을 레이블이라고 간주하고
# 그 레이블이라고 간주한 디렉토리 아래의 파일들을 해당 레이블의 이미지들이라고 알아서 추측하여
# Numpy Array Iterator를 생성
# target_size = 사용할 CNN 모델 입력 사이즈에 맞게 resize
train_gen = train_datagen.flow_from_directory('/content/drive/MyDrive/sampledata2',
                                              target_size=(100, 100),
                                              batch_size = 32,
                                              class_mode = 'categorical', subset='training')
val_gen = train_datagen.flow_from_directory('/content/drive/MyDrive/sampledata2',
                                            target_size = (100, 100),
                                            batch_size = 32,
                                            class_mode = 'categorical', subset='validation')

# 딥러닝 CNN 모델로 베이스라인 모델링
# CNN 초기화
cnn = tf.keras.models.Sequential()

# Step 1 - Convolution
cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[100, 100, 3]))

# Step 2 - Pooling
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

# Adding convolutional layer
cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

# Step 3 - Flattening
cnn.add(tf.keras.layers.Flatten())

# Step 4 - Full Connection
cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))

# Step 5 - Output Layer
cnn.add(tf.keras.layers.Dense(units=2, activation='softmax'))

# Compiling the CNN
cnn.compile(optimizer = 'adam',
            loss = 'categorical_crossentropy',
            metrics = ['accuracy'])
cnn.summary()

cnn.fit(x = train_gen, validation_data = val_gen, epochs = 10)

cnn.save('my_model.h5')
